
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  userId: 'userId',
  revoked: 'revoked',
  createdAt: 'createdAt'
};

exports.Prisma.DatasetScalarFieldEnum = {
  id: 'id',
  source: 'source',
  type: 'type',
  fileUrl: 'fileUrl',
  ingestionDate: 'ingestionDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IngestionJobScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  error: 'error'
};

exports.Prisma.ObservationScalarFieldEnum = {
  id: 'id',
  datasetId: 'datasetId',
  lat: 'lat',
  lon: 'lon',
  chlorophyll: 'chlorophyll',
  sst: 'sst',
  eddyStrength: 'eddyStrength',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.SharkScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  species: 'species',
  sex: 'sex',
  lengthCm: 'lengthCm',
  weightKg: 'weightKg',
  releaseDate: 'releaseDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackingDataScalarFieldEnum = {
  id: 'id',
  sharkId: 'sharkId',
  lat: 'lat',
  lon: 'lon',
  timestamp: 'timestamp',
  depth: 'depth',
  temperature: 'temperature',
  eddyId: 'eddyId',
  chlorophyll: 'chlorophyll',
  sst: 'sst',
  createdAt: 'createdAt'
};

exports.Prisma.SharkHotspotScalarFieldEnum = {
  id: 'id',
  region: 'region',
  latitude: 'latitude',
  longitude: 'longitude',
  count: 'count',
  avgTemp: 'avgTemp',
  avgChl: 'avgChl',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt'
};

exports.Prisma.SharkSeasonalStatsScalarFieldEnum = {
  id: 'id',
  season: 'season',
  totalTags: 'totalTags',
  uniqueSharks: 'uniqueSharks',
  avgSpeed: 'avgSpeed',
  hotspotCount: 'hotspotCount',
  createdAt: 'createdAt'
};

exports.Prisma.MLModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  description: 'description',
  endpointUrl: 'endpointUrl',
  inputSchema: 'inputSchema',
  outputSchema: 'outputSchema',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  SCIENTIST: 'SCIENTIST',
  PUBLIC: 'PUBLIC'
};

exports.DatasetStatus = exports.$Enums.DatasetStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  ApiKey: 'ApiKey',
  Dataset: 'Dataset',
  IngestionJob: 'IngestionJob',
  Observation: 'Observation',
  Shark: 'Shark',
  TrackingData: 'TrackingData',
  SharkHotspot: 'SharkHotspot',
  SharkSeasonalStats: 'SharkSeasonalStats',
  MLModel: 'MLModel'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Projects\\Nasa Speace Apps\\space-sharks-backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Projects\\Nasa Speace Apps\\space-sharks-backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  ADMIN\n  SCIENTIST\n  PUBLIC\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  password  String\n  role      Role     @default(PUBLIC)\n  apiKeys   ApiKey[]\n  createdAt DateTime @default(now())\n}\n\nmodel ApiKey {\n  id        Int      @id @default(autoincrement())\n  key       String   @unique\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  revoked   Boolean  @default(false)\n  createdAt DateTime @default(now())\n}\n\nmodel Dataset {\n  id            String         @id @default(cuid())\n  source        String // PACE | MODIS | SWOT\n  type          String // chlorophyll | SST | eddy\n  fileUrl       String\n  ingestionDate DateTime       @default(now())\n  status        DatasetStatus  @default(PENDING)\n  jobs          IngestionJob[]\n\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n  Observation Observation[]\n}\n\nmodel IngestionJob {\n  id          String    @id @default(cuid())\n  datasetId   String\n  dataset     Dataset   @relation(fields: [datasetId], references: [id])\n  status      JobStatus @default(PENDING)\n  startedAt   DateTime?\n  completedAt DateTime?\n  error       String?\n}\n\nmodel Observation {\n  id           String   @id @default(cuid())\n  datasetId    String\n  dataset      Dataset  @relation(fields: [datasetId], references: [id])\n  lat          Float\n  lon          Float\n  chlorophyll  Float?\n  sst          Float?\n  eddyStrength Float?\n  timestamp    DateTime\n\n  createdAt DateTime @default(now())\n}\n\nenum DatasetStatus {\n  PENDING\n  PROCESSING\n  COMPLETED\n  FAILED\n}\n\nenum JobStatus {\n  PENDING\n  RUNNING\n  COMPLETED\n  FAILED\n}\n\nmodel Shark {\n  id           String         @id @default(cuid())\n  tagId        String         @unique\n  species      String?\n  sex          String?\n  lengthCm     Float?\n  weightKg     Float?\n  releaseDate  DateTime?\n  trackingData TrackingData[]\n  createdAt    DateTime       @default(now())\n  updatedAt    DateTime       @updatedAt\n}\n\nmodel TrackingData {\n  id          String   @id @default(cuid())\n  sharkId     String\n  shark       Shark    @relation(fields: [sharkId], references: [id])\n  lat         Float\n  lon         Float\n  timestamp   DateTime\n  depth       Float?\n  temperature Float?\n  eddyId      String? // (optional) Eddy / ocean feature reference\n  chlorophyll Float?\n  sst         Float?\n  createdAt   DateTime @default(now())\n}\n\nmodel SharkHotspot {\n  id        String   @id @default(cuid())\n  region    String\n  latitude  Float\n  longitude Float\n  count     Int\n  avgTemp   Float?\n  avgChl    Float?\n  startTime DateTime\n  endTime   DateTime\n  createdAt DateTime @default(now())\n}\n\nmodel SharkSeasonalStats {\n  id           String   @id @default(cuid())\n  season       String // e.g., \"Winter-2025\"\n  totalTags    Int\n  uniqueSharks Int\n  avgSpeed     Float?\n  hotspotCount Int\n  createdAt    DateTime @default(now())\n}\n\nmodel MLModel {\n  id           String   @id @default(cuid())\n  name         String\n  version      String\n  description  String?\n  endpointUrl  String // Python ML সার্ভিস বা FastAPI endpoint\n  inputSchema  Json\n  outputSchema Json\n  status       String   @default(\"active\") // active | deprecated\n  createdAt    DateTime @default(now())\n}\n",
  "inlineSchemaHash": "b94ea73ae3f1edd81c5bbe92043fd2ff00000ba47a7191bb83239298d75ca64d",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"ApiKey\",\"relationName\":\"ApiKeyToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ApiKeyToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"revoked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Dataset\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ingestionDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DatasetStatus\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"IngestionJob\",\"relationName\":\"DatasetToIngestionJob\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Observation\",\"kind\":\"object\",\"type\":\"Observation\",\"relationName\":\"DatasetToObservation\"}],\"dbName\":null},\"IngestionJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"datasetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dataset\",\"kind\":\"object\",\"type\":\"Dataset\",\"relationName\":\"DatasetToIngestionJob\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Observation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"datasetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dataset\",\"kind\":\"object\",\"type\":\"Dataset\",\"relationName\":\"DatasetToObservation\"},{\"name\":\"lat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"lon\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"chlorophyll\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sst\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"eddyStrength\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Shark\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"species\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sex\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lengthCm\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"weightKg\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"releaseDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trackingData\",\"kind\":\"object\",\"type\":\"TrackingData\",\"relationName\":\"SharkToTrackingData\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TrackingData\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sharkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shark\",\"kind\":\"object\",\"type\":\"Shark\",\"relationName\":\"SharkToTrackingData\"},{\"name\":\"lat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"lon\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"depth\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"eddyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chlorophyll\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sst\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SharkHotspot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avgTemp\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"avgChl\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SharkSeasonalStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"season\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalTags\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"uniqueSharks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"avgSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"hotspotCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"MLModel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endpointUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"inputSchema\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"outputSchema\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

